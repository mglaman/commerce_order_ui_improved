<?php

/**
 * @file
 * Module file for Commerce Order UI Improved
 */

/**
 * Implements hook_entity_info_alter().
 *
 * Adds a new order view mode
 */
function commerce_order_ui_improved_entity_info_alter(&$entity_info) {
  $entity_info['commerce_order']['view modes']['ui_improved'] = array(
    'label' => t('Commerce Order UI Improved'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_theme().
 */
function commerce_order_ui_improved_theme(&$existing) {
  $themes =  array(
    'commerce_order__improved' => array(
      'path' => drupal_get_path('module', 'commerce_order_ui_improved') . '/theme',
      'template' => 'commerce-order--improved',
    ),
  );

  return $themes;
}

/**
 * Implements hook_preprocess_entity().
 * Add the template file for the improved view mode.
 */
function commerce_order_ui_improved_preprocess_entity(&$vars) {
  if ($vars['entity_type'] == 'commerce_order' && in_array($vars['view_mode'], array('administrator', 'ui_improved'))) {
    $vars['theme_hook_suggestions'][] = 'commerce_order__improved';
    $vars['classes_array'][] = 'commerce-order-ui-improved';
    drupal_add_css(drupal_get_path('module', 'commerce_order_ui_improved') . '/theme/commerce-order-ui-improved.css');
  }
}

/**
 * Implements hook_entity_view().
 * Brings new variables into scope.
 */
function commerce_order_ui_improved_entity_view($entity, $type, $view_mode, $langcode) {
  switch ($type) {
      case 'commerce_customer_profile':

      break;
      case 'commerce_order':
        $order_wrapper = entity_metadata_wrapper('commerce_order', $entity);
        $entity->content['order_number'] = array(
          '#markup' => $entity->order_number,
          '#printed' => '',
        );
        $entity->content['customer_email'] = array(
          '#markup' => $entity->mail,
          '#printed' => '',
        );
        $customer = user_load_by_mail($entity->mail);

        $entity->content['customer_id'] = array(
          '#markup' => $customer->uid,
          '#printed' => '',
        );

        // Initialized empty payment variables, in case there are no transactions.
        $entity->content['payment_remote_id'] = array(
          '#markup' => '',
          '#printed' => '',
        );
        $entity->content['payment_method'] = array(
          '#markup' => '',
          '#printed' => '',
        );

        // Find transactions
        foreach (commerce_payment_transaction_load_multiple(array(), array('order_id' => $entity->order_id)) as $transaction) {
          if ($transaction->status == 'success' && !empty($transaction->remote_id)) {
            $entity->content['payment_remote_id']['#markup'] = $transaction->remote_id;

            $payment_methods_array = commerce_payment_methods();
            $payment_method = $payment_methods_array[$transaction->payment_method];
            $entity->content['payment_method']['#markup'] = $payment_method['short_title'];
          }
        }

      break;
  }
}
